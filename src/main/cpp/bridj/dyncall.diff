diff -r 33c333ec5ad2 dyncall/dyncall_callvm_x64.c
--- a/dyncall/dyncall_callvm_x64.c	Sun Mar 06 23:30:44 2016 +0100
+++ b/dyncall/dyncall_callvm_x64.c	Tue Mar 08 15:36:04 2016 +0300
@@ -31,7 +31,9 @@
 
 #include "dyncall_callvm_x64.h"
 #include "dyncall_alloc.h"
+#include "dyncall_signature.h"
 #include "dyncall_struct.h"
+#include <string.h>
 
 static DCCallVM* dc_callvm_new_x64(DCCallVM_vt* vt, DCsize size)
 {
@@ -156,8 +158,66 @@
     dcVecAppend(&self->mVecHead, &x, sizeof(DCpointer));
 }
 
+// >= 0 n-th bit of bitmask means that n-th byte of structure is in INT field
+static int classify_struct_x64(DCstruct* s) {
+  DCsize i, j;
+  int bitmask = 0, submask;
+  for (i = 0; i < s->fieldCount; i++) {
+    DCfield *f = s->pFields + i;
+    for (j = 0; j < f->arrayLength; j++) {
+      int offset = f->offset + j*f->size;
+      switch (f->type) {
+      case DC_SIGCHAR_FLOAT:
+      case DC_SIGCHAR_DOUBLE:
+	break;
+      case DC_SIGCHAR_STRUCT:
+	submask = classify_struct_x64(f->pSubStruct);
+	bitmask |= (submask << offset);
+	break;
+      default:
+	submask = (1 << f->size) - 1;
+	bitmask  |= (submask << offset);
+      }
+    }
+  }
+  return bitmask;
+}
+
 static void dc_callvm_argStruct_x64(DCCallVM* in_self, DCstruct* s, DCpointer x)
 {
+  DCsize i, bitmask;
+  DCCallVM_x64* self = (DCCallVM_x64*)in_self;
+  /*printf("dc_callvm_argStruct_x64 size = %d\n", (int)s->size);@@@*/
+  if (s->size > 16) {
+    dcVecAppend(&self->mVecHead, x, s->size);
+    self->mVecHead.mSize = (self->mVecHead.mSize + 7) & -8; // align to octobyte
+    return;
+  }
+  
+  // Avoid accessig bytes out of struct
+  DClonglong buf[2] = {0, 0};
+  memcpy(buf, x, s->size);
+  
+  bitmask = classify_struct_x64(s);
+  for (int i = 0; i*8 < s->size; i++) {
+    if (((bitmask >> (i*8)) & 0xff) != 0) {
+      // INTEGER class
+      if(self->mRegCount.i < numIntRegs)
+	self->mRegData.i[self->mRegCount.i++] = buf[i];
+      else
+	dcVecAppend(&self->mVecHead, &buf[i], sizeof(DClonglong));
+    } else {
+      // SSE class
+      if(self->mRegCount.f < numFloatRegs)
+	*(DClonglong*)&self->mRegData.f[self->mRegCount.f++] = buf[i];
+      else
+	dcVecAppend(&self->mVecHead, &buf[i], sizeof(DCdouble));
+    }
+  }
+}
+
+static void dc_callvm_argStruct_x64_old(DCCallVM* in_self, DCstruct* s, DCpointer x)
+{
   DCCallVM_x64* self = (DCCallVM_x64*)in_self;
   dcVecAppend(&self->mVecHead, x, s->size);
   /*printf("dc_callvm_argStruct_x64 size = %d\n", (int)s->size);@@@*/
@@ -167,7 +227,6 @@
   /*	  dcVecAppend(&self->mVecHead, &x, sizeof(DCpointer));@@@*/
 }
 
-
 /* Call. */
 void dc_callvm_call_x64(DCCallVM* in_self, DCpointer target)
 {
diff -r 33c333ec5ad2 dyncall/dyncall_struct.c
--- a/dyncall/dyncall_struct.c	Sun Mar 06 23:30:44 2016 +0100
+++ b/dyncall/dyncall_struct.c	Tue Mar 08 15:36:04 2016 +0300
@@ -130,6 +130,7 @@
 	for (i = 0; i < s->fieldCount; i++) {
 		DCfield *f = s->pFields + i;
 		dcAlign(&s->size, f->alignment);
+		f->offset = s->size;
 		s->size += f->size;
 	}
 	dcAlign(&s->size, s->alignment);
diff -r 33c333ec5ad2 dynload/dynload_syms_mach-o.c
--- a/dynload/dynload_syms_mach-o.c	Sun Mar 06 23:30:44 2016 +0100
+++ b/dynload/dynload_syms_mach-o.c	Tue Mar 08 15:36:04 2016 +0300
@@ -29,6 +29,7 @@
  dynamic symbol resolver for Mach-O
 
 */
+#include "../autovar/autovar_ARCH.h"
 
 #include "dynload.h"
 #include "dynload_alloc.h"
@@ -40,15 +41,16 @@
 
 #if defined(ARCH_X64) //@@@ use dyncall_macros.h
 #define MACH_HEADER_TYPE mach_header_64
+#define MACH_MAGIC MH_MAGIC_64
 #define SEGMENT_COMMAND segment_command_64
 #define NLIST_TYPE nlist_64
 #else
 #define MACH_HEADER_TYPE mach_header
+#define MACH_MAGIC MH_MAGIC
 #define SEGMENT_COMMAND segment_command
 #define NLIST_TYPE nlist
 #endif
 
-
 struct DLLib_
 {
 	char* libPath;
@@ -58,11 +60,139 @@
 
 struct DLSyms_
 {
+    const char** decompressedSymbols;
 	const char* pStringTable;
 	const struct NLIST_TYPE* pSymbolTable;
 	uint32_t symbolCount;
 };
 
+int isSameMacImageName(const char* libPath, const char* systemLibPath) {
+	if (!libPath || !systemLibPath)
+		return 0;
+	
+	if (!strcmp(libPath, systemLibPath))
+		return 1;
+	
+	if (strstr(libPath, "/libc.") && strstr(systemLibPath, "/libSystem."))
+		return 1;
+	
+	return 0;
+}
+
+///
+/// LEB128 DECODING (http://en.wikipedia.org/wiki/LEB128)
+///
+unsigned long long decode_leb128(const unsigned char** ppIn) {
+    const unsigned char* pIn = *ppIn;
+    unsigned char input;
+    unsigned long long decoded = 0;
+    int shift = 0;
+    do {
+        input = *pIn++;
+        decoded |= (((unsigned long long)(input & 0x7f)) << shift);
+        shift += 7;
+    } while (input & 0x80);
+    
+    *ppIn = pIn;
+    return decoded;
+}
+
+///
+/// DUMMY APPENDABLE STRING 
+///
+typedef struct _DCString {
+    char* buffer;
+    size_t capacity;
+} DCString;
+void initString(DCString* s, size_t capacity) {
+    if (!s)
+        return;
+    
+    s->buffer = dlAllocMem((s->capacity = capacity) + 1);
+    s->buffer[0] = '\0';
+}
+void appendString(DCString* s, const char* suffix) {
+    if (!s)
+        return;
+    
+    size_t suffixLen = strlen(suffix), sLen = strlen(s->buffer);
+    if (suffixLen + sLen > s->capacity) {
+        char* old = s->buffer;
+        initString(s, (suffixLen + sLen) * 3 / 2);
+        strcpy(s->buffer, old);
+        dlFreeMem(old);
+    }
+    strcpy(s->buffer + sLen, suffix);
+}
+void freeString(DCString* s) {
+	if (s->buffer) {
+		dlFreeMem(s->buffer);
+		s->buffer = NULL;
+		s->capacity = 0;
+	}
+}
+
+///
+/// MACHO COMPRESSED SYMBOLS TRIE VISITATION
+///
+typedef void (*SymbolOutputFunction)(const char* symbol, size_t index, void* payload);
+
+#define MAX_DEPTH 256
+
+size_t visitTrie(
+	const unsigned char* start, 
+	const unsigned char* current, 
+	const unsigned char* end, 
+	DCString* prefix, 
+	SymbolOutputFunction output, size_t indexOffset, void* payload, int depth) 
+{
+    size_t count = 0;
+	if (current < end && depth < MAX_DEPTH) {
+        unsigned char term_size = *current++;
+        if (term_size != 0) {
+            //const unsigned char* pos = current;
+            //unsigned long long flags = decode_leb128(&pos);
+            //unsigned long long addr = decode_leb128(&pos);
+            {
+				if (prefix && output)
+					output(prefix->buffer, indexOffset, payload);
+				
+				indexOffset++;
+				count++;
+			}
+            
+            current += term_size;
+        }
+
+        unsigned char iSubNode, nSubNodes = *current++;
+        
+        size_t prefixLen = prefix ? strlen(prefix->buffer) : 0;
+        for (iSubNode = 0; iSubNode < nSubNodes; iSubNode++) {
+            unsigned long long subNodeOffset;
+            const char* suffix = (const char*)current;
+            current += strlen(suffix) + 1;
+            if (!(subNodeOffset = decode_leb128(&current)))
+            	continue;
+            
+			appendString(prefix, suffix);
+			size_t subCount = visitTrie(start, start + subNodeOffset, end, prefix, output, indexOffset, payload, depth + 1);
+			count += subCount;
+			indexOffset += subCount;
+			if (prefix)
+				prefix->buffer[prefixLen] = '\0';
+        }
+    }
+    return count;
+}
+
+/// Callback to harvest symbols visited in trie
+void CopyToNthString(const char* str, size_t index, void* payload) {
+    const char** pstr = (const char**)payload;
+    size_t len = strlen(str);
+    char* copy = dlAllocMem(len + 1);
+    strcpy(copy, str);
+    pstr[index] = copy;
+}
 
 DLSyms* dlSymsInit(const char* libPath) 
 {
@@ -71,27 +201,59 @@
 	for (iImage = 0, nImages = _dyld_image_count(); iImage < nImages; iImage++)
 	{
 		const char* name = _dyld_get_image_name(iImage);
-		if (name && !strcmp(name, libPath))
+		if (isSameMacImageName(libPath, name))
 		{
 			const struct MACH_HEADER_TYPE* pHeader = (const struct MACH_HEADER_TYPE*) _dyld_get_image_header(iImage);
 			const char* pBase = ((const char*)pHeader);
+			if (!pHeader)
+				return NULL;
+
+			if (pHeader->magic != MACH_MAGIC)
+				return NULL;
 			if (pHeader->filetype != MH_DYLIB)
 				return NULL;
-			if (pHeader->flags & MH_SPLIT_SEGS)
+			if (pHeader->flags & MH_SPLIT_SEGS || !(pHeader->flags & MH_DYLDLINK))
 				return NULL;
-
-			if (pHeader)
+			
 			{
 				uint32_t iCmd, nCmds = pHeader->ncmds;
 				const struct load_command* cmd = (const struct load_command*)(pBase + sizeof(struct MACH_HEADER_TYPE));
 				
 				for (iCmd = 0; iCmd < nCmds; iCmd++) 
 				{
-					if (cmd->cmd == LC_SYMTAB) 
-					{
+					if (cmd->cmd == LC_DYLD_INFO_ONLY || cmd->cmd == LC_DYLD_INFO) {
+                        const struct dyld_info_command* dcmd = (const struct dyld_info_command*)cmd;
+                        const unsigned char* trie = (pBase + dcmd->export_off);
+                        
+                        pSyms = (DLSyms*)( dlAllocMem(sizeof(DLSyms)) );
+                        
+                        // First, get the number of symbols
+                        pSyms->symbolCount = visitTrie(trie, trie, trie + dcmd->export_size, NULL, NULL, 0, NULL, 0);
+                        
+                        if (pSyms->symbolCount) {
+                            // Now revisit and copy symbols to their destination
+                            DCString s;
+                            size_t decompSize = pSyms->symbolCount * sizeof(char*) * 2;
+                            pSyms->decompressedSymbols = dlAllocMem(decompSize);
+                            memset(pSyms->decompressedSymbols, decompSize, 0);
+                            initString(&s, 1024);
+                            visitTrie(trie, trie, trie + dcmd->export_size, &s, CopyToNthString, 0, pSyms->decompressedSymbols, 0);
+                            freeString(&s);
+                        }
+                        
+                        return pSyms;
+                    }
+                    
+                    if (cmd->cmd & LC_REQ_DYLD) {
+                    	return NULL; // "unknown load command required for execution";
+                    }
+                    if (cmd->cmd == LC_SYMTAB) 
+                    {
 						const struct symtab_command* scmd = (const struct symtab_command*)cmd;
 					
 						pSyms = (DLSyms*)( dlAllocMem(sizeof(DLSyms)) );
+						//memset(pSyms, sizeof(DLSyms), 0);
+						pSyms->decompressedSymbols = NULL;
 						pSyms->symbolCount = scmd->nsyms;
 						pSyms->pStringTable = pBase + scmd->stroff;
 						pSyms->pSymbolTable = (struct NLIST_TYPE*)(pBase + scmd->symoff);
@@ -101,7 +263,6 @@
 					cmd = (const struct load_command*)(((char*)cmd) + cmd->cmdsize);
 				}
 			}
-			break;
 		}
 	}
 	return NULL;
@@ -113,6 +274,18 @@
 	if (!pSyms)
 		return;
 	
+    if (pSyms->decompressedSymbols) {
+        size_t i, n = pSyms->symbolCount;
+        for (i = 0; i < n; i++) {
+            const char* str = pSyms->decompressedSymbols[i];
+            if (str) {
+            	dlFreeMem(str);
+            	pSyms->decompressedSymbols[i] = NULL;
+            }
+        }
+        dlFreeMem(pSyms->decompressedSymbols);
+        pSyms->decompressedSymbols = NULL;
+    }
 	dlFreeMem(pSyms);
 }
 
@@ -133,6 +306,11 @@
 	if (nl->n_un.n_strx <= 1)
 		return NULL; // would be empty string anyway
 	
+    if (!(nl->n_type & N_EXT) || (nl->n_type & N_PEXT))
+        return NULL; // not a public external symbol
+    if (nl->n_type & N_STAB)
+        return NULL;
+    
 	//TODO skip more symbols based on nl->n_desc and nl->n_type ?
 	return nl;
 }
@@ -140,6 +318,12 @@
 
 const char* dlSymsName(DLSyms* pSyms, int index)
 {
+    if (!pSyms || index >= pSyms->symbolCount)
+        return NULL;
+ 
+    if (pSyms->decompressedSymbols)
+        return pSyms->decompressedSymbols[index];
+            
 	const struct NLIST_TYPE* nl = get_nlist(pSyms, index);
 	if (!nl)
 		return NULL;
@@ -150,6 +334,12 @@
 
 void* dlSymsValue(DLSyms* pSyms, int index)
 {
+    if (!pSyms || index >= pSyms->symbolCount)
+        return NULL;
+    
+    if (pSyms->decompressedSymbols)
+        return NULL; // TODO use dlFindSymbol
+            
 	const struct NLIST_TYPE* nl = get_nlist(pSyms, index);
 	if (!nl)
 		return NULL;
diff -r 33c333ec5ad2 dynload/dynload_unix.c
--- a/dynload/dynload_unix.c	Sun Mar 06 23:30:44 2016 +0100
+++ b/dynload/dynload_unix.c	Tue Mar 08 15:36:04 2016 +0300
@@ -41,7 +41,7 @@
 
 DLLib* dlLoadLibrary(const char* libPath)
 {
-  return (DLLib*)dlopen(libPath,RTLD_NOW|RTLD_GLOBAL);
+  return (DLLib*)dlopen(libPath,RTLD_LAZY|RTLD_GLOBAL);
 }
 
 
diff -r 33c333ec5ad2 dynload/dynload_windows.c
--- a/dynload/dynload_windows.c	Sun Mar 06 23:30:44 2016 +0100
+++ b/dynload/dynload_windows.c	Tue Mar 08 15:36:04 2016 +0300
@@ -41,7 +41,9 @@
 DLLib* dlLoadLibrary(const char* libPath)
 {
   if (libPath != NULL) {
-    return (DLLib*) LoadLibraryA(libPath);
+    return (DLLib*) LoadLibraryExW((wchar_t*)(void*)libPath, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);
+  	// http://msdn.microsoft.com/en-us/library/windows/desktop/ms684179(v=vs.85).aspx
+    // return (DLLib*) LoadLibraryExA(libPath, NULL, LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR | LOAD_LIBRARY_DEFAULT_DIRS);
     /*return (DLLib*) LoadLibraryA(libPath, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);*/
   } else {
     return (DLLib*) GetModuleHandle(NULL);
